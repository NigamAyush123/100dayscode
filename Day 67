import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static int birthday(List<Integer> s, int d, int m) {
    // Write your code here
      int combinations = 0;
        for (int i = 0; i < s.size() && (s.size() - i) >= m ; i++) {
            if (isValidSquare(s, i, d, m)) {
                combinations++;
            }
        }
        return combinations;
    }

    private static boolean isValidSquare(List<Integer> s, int currentIteration, int wantedTotal, int wantedLength) {
        int accumulation = 0;
        
        while (wantedLength > 0 && currentIteration < s.size() && accumulation < wantedTotal) {
           accumulation += s.get(currentIteration);
           wantedLength--;
           currentIteration++;
        }
        
        return wantedLength == 0 && accumulation == wantedTotal;
    }

    }



public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> s = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int d = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        int result = Result.birthday(s, d, m);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
